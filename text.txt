<?php 

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}
    /**
	 * Class CPF_CPT.
	 */
	class CFP_CPT {

		/**
		 *  Constructor.
		 */
		public function __construct() {

            add_action( 'init', array( $this, 'cpf_custom_post_type'));

        }
        /**
		 *  Custom Post Type Function.
		 */
        public function cpf_custom_post_type(){

            $labels = array(
                'name'                  => __( 'movies'),
                'singular_name'         => __( 'movie'),
                'menu_name'             => __( 'movies'),
                'name_admin_bar'        => __( 'movie'),
                'add_new'               => __( 'Add New'),
                'add_new_item'          => __( 'Add New movie'),
                'new_item'              => __( 'New movie'),
                'edit_item'             => __( 'Edit movie'),
                'view_item'             => __( 'View movie'),
                'all_items'             => __( 'All movies'),
                'search_items'          => __( 'Search movies'),
                'parent_item_colon'     => __( 'Parent movies:'),
                'not_found'             => __( 'No movies found.'),
                'not_found_in_trash'    => __( 'No movies found in Trash.'),
                'featured_image'        => __( 'movie Cover Image', 'Overrides the “Featured Image” phrase for this post type. Added in 4.3', 'movie' ),
                'set_featured_image'    => __( 'Set cover image', 'Overrides the “Set featured image” phrase for this post type. Added in 4.3', 'movie' ),
                'remove_featured_image' => __( 'Remove cover image', 'Overrides the “Remove featured image” phrase for this post type. Added in 4.3', 'movie' ),
                'use_featured_image'    => __( 'Use as cover image', 'Overrides the “Use as featured image” phrase for this post type. Added in 4.3', 'movie' ),
                'archives'              => __( 'movie archives', 'The post type archive label used in nav menus. Default “Post Archives”. Added in 4.4', 'movie' ),
                'insert_into_item'      => __( 'Insert into movie', 'Overrides the “Insert into post”/”Insert into page” phrase (used when inserting media into a post). Added in 4.4', 'movie' ),
                'uploaded_to_this_item' => __( 'Uploaded to this movie', 'Overrides the “Uploaded to this post”/”Uploaded to this page” phrase (used when viewing media attached to a post). Added in 4.4', 'movie' ),
                'filter_items_list'     => __( 'Filter movies list', 'Screen reader text for the filter links heading on the post type listing screen. Default “Filter posts list”/”Filter pages list”. Added in 4.4', 'movie' ),
                'items_list_navigation' => __( 'movies list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default “Posts list navigation”/”Pages list navigation”. Added in 4.4', 'movie' ),
                'items_list'            => __( 'movies list', 'Screen reader text for the items list heading on the post type listing screen. Default “Posts list”/”Pages list”. Added in 4.4', 'movie' ),
            );     
            $args = array(
                'labels'             => $labels,
                'description'        => 'movie custom post type.',
                'public'             => true,
                'publicly_queryable' => true,
                'show_ui'            => true,
                'show_in_menu'       => true,
                'query_var'          => true,
                'rewrite'            => array( 'slug' => 'movie' ),
                'capability_type'    => 'post',
                'has_archive'        => true,
                'hierarchical'       => false,
                'menu_position'      => 20,
                'supports'           => array( 'title', 'editor', 'author', 'thumbnail' ),
                'taxonomies'         => array( 'category', 'post_tag' ),
                'show_in_rest'       => true
            );
            register_post_type( 'movie', $args );
        }







<?php 

if ( ! defined( 'ABSPATH' ) ) 
{
	exit;
}
    /**
	* Class SA_CPT.
	*/
class SA_metabox 
{
	/**
	*  Constructor.
	*/
    
    public function __construct() 
    {
        add_action("add_meta_boxes", array($this, "sa_metabox_quiz"));
        add_action("save_post", array($this, "sa_metabox_quiz_value_save"),10,2);
    }
    /**
	*  Register Metabox Function FOr SA quiz.
	*/
    
    public function sa_metabox_quiz()
    {
        add_meta_box( "cpt-id", "Quiz Details", array($this,"sa_metabox_details"),"quiz","advanced");
    }

    public function sa_metabox_details($post)
    { 
        ?>
        <p> <label> Teacher Name </label>
        <?php  $name = get_post_meta($post->ID,"teacher_name",true) ?>
        <input type="text" value="<?php echo $name ?>" name="TxtTeacherName" placeholder="name"/>
        </p>
        <p>
        <label> Teacher Email </label>
        <?php  $email = get_post_meta($post->ID,"teacher_email",true) ?>
        <input type="email" value="<?php echo $email ?>" name="TxtTeacherEmail" placeholder="email"/>
        </p> <?php
    }
        
    // getting data from metabox Teacher details (cpt quiz)
        
    public function sa_metabox_quiz_value_save($post_id, $post)
    {
        $TxtTeacherName = isset($_POST['TxtTeacherName'])?$_POST['TxtTeacherName']:"";
        $TxtTeacherEmail = isset($_POST['TxtTeacherEmail'])?$_POST['TxtTeacherEmail']:"";
        
        update_post_meta( $post_id,"teacher_name",$TxtTeacherName);
        update_post_meta( $post_id,"teacher_email",$TxtTeacherEmail);
    } 
}
    new SA_metabox();
?>